// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package aqcommon.actions;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.core.CoreRuntimeException;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.webui.CustomJavaAction;
import aqcommon.proxies.Parameter;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * Calls a microflow using the provided parameters
 * 
 * Note, that Lists are not supported when executing a microflow as a background task
 */
public class ExecuteMicroflowWithNoResult extends CustomJavaAction<java.lang.Void>
{
	private final java.lang.String MicroflowCompleteName;
	/** @deprecated use com.mendix.utils.ListUtils.map(ParameterList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __ParameterList;
	private final java.util.List<aqcommon.proxies.Parameter> ParameterList;
	private final java.lang.String TaskQueueCompleteName;
	private final java.util.Date StartAt;

	public ExecuteMicroflowWithNoResult(
		IContext context,
		java.lang.String _microflowCompleteName,
		java.util.List<IMendixObject> _parameterList,
		java.lang.String _taskQueueCompleteName,
		java.util.Date _startAt
	)
	{
		super(context);
		this.MicroflowCompleteName = _microflowCompleteName;
		this.__ParameterList = _parameterList;
		this.ParameterList = java.util.Optional.ofNullable(_parameterList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(parameterListElement -> aqcommon.proxies.Parameter.initialize(getContext(), parameterListElement))
			.collect(java.util.stream.Collectors.toList());
		this.TaskQueueCompleteName = _taskQueueCompleteName;
		this.StartAt = _startAt;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
		try {			
			Map<String,Object> parameterMap = new HashMap<String,Object>();
						
			for(Parameter parameter : ParameterList) {
				String parameterName = parameter.getParameterName();
				
				_logger.debug("parameterName :: " + parameterName);
				switch(parameter.getParameterType()) {
					case StringType:
						String stringValue = parameter.getStringValue();
						_logger.debug("String value :: " + stringValue);
						parameterMap.put(parameterName, stringValue);
						break;
					case BooleanType:
						Boolean booleanValue = parameter.getBooleanValue();
						_logger.debug("Boolean value :: " + booleanValue);
						parameterMap.put(parameterName, booleanValue);
						break;
					case DateTimeType:
						Long dateTimeValue = parameter.getDateTimeValue().getTime();
						_logger.debug("DateTime value :: " + dateTimeValue);
						parameterMap.put(parameterName, dateTimeValue);
						break;
					case Decimal:
						BigDecimal decimalValue = parameter.getDecimalValue();
						_logger.debug("Decimal value :: " + decimalValue);
						parameterMap.put(parameterName, decimalValue);
						break;
					case IntegerType:
						Integer integerValue = parameter.getIntegerValue();
						_logger.debug("Integer value :: " + integerValue);
						parameterMap.put(parameterName, integerValue);
						break;
					case LongType:
						Long longValue = parameter.getLongValue();
						_logger.debug("Long value :: " + longValue);
						parameterMap.put(parameterName, longValue);
						break;
					case AssociatedObjectType:
						String associatedObjectValue = parameter.getAssociatedObjectValue();
						_logger.debug("Associated Object value :: " + associatedObjectValue);						
						Object associatedObject =  parameter.getMendixObject().getValue(getContext(), associatedObjectValue);
						
						if(associatedObject instanceof IMendixIdentifier) {
							IMendixIdentifier mxAssociatedObject =  (IMendixIdentifier)associatedObject;
							parameterMap.put(parameterName, Core.retrieveId(getContext(), mxAssociatedObject));
						}
						else if(associatedObject instanceof List){
							// we have to assume its List<IMendixIdentifier>	
							List<IMendixIdentifier> mxAssociatedObjectList =  (List<IMendixIdentifier>)associatedObject;
							List<IMendixObject> mxObjectList = new ArrayList<IMendixObject>();
							for(IMendixIdentifier mxAssociatedObject : mxAssociatedObjectList) {
								IMendixObject mxObject = Core.retrieveId(getContext(), mxAssociatedObject);
								mxObjectList.add(mxObject);
							}
							parameterMap.put(parameterName, mxObjectList);
						}
						break;
					default:
						_logger.debug("No parameter type specified.");
						break;
				}			
			}
			
			if(TaskQueueCompleteName != null && !TaskQueueCompleteName.equals("")) {
				if(StartAt != null) {
					Core.microflowCall(MicroflowCompleteName).withParams(parameterMap).executeInBackground(getContext(), TaskQueueCompleteName, StartAt);
				}
				else {
					Core.microflowCall(MicroflowCompleteName).withParams(parameterMap).executeInBackground(getContext(), TaskQueueCompleteName);
				}
			}
			else {
				Core.microflowCall(MicroflowCompleteName).withParams(parameterMap).execute(getContext());
			}
			
			return null;
		}
		catch(CoreRuntimeException err) {
			throw err;
		}
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExecuteMicroflowWithNoResult";
	}

	// BEGIN EXTRA CODE
	private final ILogNode _logger = Core.getLogger("ExecuteMicroflowWithNoResult");
	// END EXTRA CODE
}
