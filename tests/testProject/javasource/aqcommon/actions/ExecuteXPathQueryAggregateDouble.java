// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package aqcommon.actions;

import java.math.BigDecimal;
import java.util.List;
import com.mendix.core.Core;
import com.mendix.core.CoreRuntimeException;
import com.mendix.datastorage.XPathQuery;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.webui.CustomJavaAction;
import aqcommon.proxies.Parameter;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class ExecuteXPathQueryAggregateDouble extends CustomJavaAction<java.math.BigDecimal>
{
	private final java.lang.String Entity;
	private final java.lang.String XPathString;
	/** @deprecated use com.mendix.utils.ListUtils.map(VariableList, com.mendix.systemwideinterfaces.core.IEntityProxy::getMendixObject) instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final java.util.List<IMendixObject> __VariableList;
	private final java.util.List<aqcommon.proxies.Parameter> VariableList;
	private final java.lang.Long Amount;
	private final java.lang.Long Offset;
	private final aqcommon.proxies.AggregateFunction AggregateFunction;

	public ExecuteXPathQueryAggregateDouble(
		IContext context,
		java.lang.String _entity,
		java.lang.String _xPathString,
		java.util.List<IMendixObject> _variableList,
		java.lang.Long _amount,
		java.lang.Long _offset,
		java.lang.String _aggregateFunction
	)
	{
		super(context);
		this.Entity = _entity;
		this.XPathString = _xPathString;
		this.__VariableList = _variableList;
		this.VariableList = java.util.Optional.ofNullable(_variableList)
			.orElse(java.util.Collections.emptyList())
			.stream()
			.map(variableListElement -> aqcommon.proxies.Parameter.initialize(getContext(), variableListElement))
			.collect(java.util.stream.Collectors.toList());
		this.Amount = _amount;
		this.Offset = _offset;
		this.AggregateFunction = _aggregateFunction == null ? null : aqcommon.proxies.AggregateFunction.valueOf(_aggregateFunction);
	}

	@java.lang.Override
	public java.math.BigDecimal executeAction() throws Exception
	{
		// BEGIN USER CODE
		BigDecimal result = null;
		
		try {
			java.lang.String xpath = AggregateFunction.name() +  "(//" + this.Entity.toString() + (this.XPathString == null ? "" : this.XPathString) + ")";
			_logger.debug("xpath :: " + xpath);
			
			XPathQuery xpathQuery = Core.createXPathQuery(xpath);
			xpathQuery.setDepth(1);

			for(Parameter variable : VariableList) {
				String variableName = variable.getParameterName().replace("$", "");
				_logger.debug("variableName :: " + variableName);
				switch(variable.getParameterType()) {
					case StringType:
						String stringValue = variable.getStringValue();
						_logger.debug("String value :: " + stringValue);
						xpathQuery.setVariable(variableName, stringValue);
						break;
					case BooleanType:
						Boolean booleanValue = variable.getBooleanValue();
						_logger.debug("Boolean value :: " + booleanValue);
						xpathQuery.setVariable(variableName, booleanValue);
						break;
					case DateTimeType:
						Long dateTimeValue = variable.getDateTimeValue().getTime();
						_logger.debug("DateTime value :: " + dateTimeValue);
						xpathQuery.setVariable(variableName, dateTimeValue);
						break;
					case Decimal:
						BigDecimal decimalValue = variable.getDecimalValue();
						_logger.debug("Decimal value :: " + decimalValue);
						xpathQuery.setVariable(variableName, decimalValue);
						break;
					case IntegerType:
						Integer integerValue = variable.getIntegerValue();
						_logger.debug("Integer value :: " + integerValue);
						xpathQuery.setVariable(variableName, integerValue);
						break;
					case LongType:
						Long longValue = variable.getLongValue();
						_logger.debug("Long value :: " + longValue);
						xpathQuery.setVariable(variableName, longValue);
						break;
					case AssociatedObjectType:
						String associatedObjectValue = variable.getAssociatedObjectValue();
						_logger.debug("Associated Object value :: " + associatedObjectValue);						
						IMendixIdentifier associatedObject =  (IMendixIdentifier)variable.getMendixObject().getValue(getContext(), associatedObjectValue);
						xpathQuery.setVariable(variableName, associatedObject);
						break;
					default:
						_logger.debug("No variable type specified.");
						break;
				}				
			}
			
			if(Amount != null) {
				Integer amount = Amount.intValue();
				_logger.debug("Amount param :: " + amount);
				xpathQuery.setAmount(amount);
			}
			
			if(Offset != null) {
				Integer offset = Offset.intValue();
				_logger.debug("Offset param :: " + offset);
				xpathQuery.setOffset(offset);
			}
					
			// current version doesn't yet support executeAggregateDouble​
			result = BigDecimal.valueOf(xpathQuery.executeAggregateDouble(getContext()));
		}
		catch(CoreRuntimeException err) {
			_logger.error("XPath '" + this.XPathString + "' seems to be invalid");
			throw err;
		}
		
		return result;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExecuteXPathQueryAggregateDouble";
	}

	// BEGIN EXTRA CODE
	private final ILogNode _logger = Core.getLogger("ExecuteXPathQuery");
	// END EXTRA CODE
}
