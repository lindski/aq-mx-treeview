// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package aqcommon.actions;

import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;

public class GetWorkflowContext extends CustomJavaAction<IMendixObject>
{
	/** @deprecated use Workflow.getMendixObject() instead. */
	@java.lang.Deprecated(forRemoval = true)
	private final IMendixObject __Workflow;
	private final system.proxies.Workflow Workflow;
	private final java.lang.String ContextType;

	public GetWorkflowContext(
		IContext context,
		IMendixObject _workflow,
		java.lang.String _contextType
	)
	{
		super(context);
		this.__Workflow = _workflow;
		this.Workflow = _workflow == null ? null : system.proxies.Workflow.initialize(getContext(), _workflow);
		this.ContextType = _contextType;
	}

	@java.lang.Override
	public IMendixObject executeAction() throws Exception
	{
		// BEGIN USER CODE
		com.mendix.workflows.Workflow workflow = Core.workflows().getWorkflow(getContext(), Workflow.getMendixObject());
		IMendixObject workflowContext = workflow.getWorkflowContext();
		if(workflowContext.getType().equals(ContextType) || ObjectIsSpecialisationOf(workflowContext.getType(), ContextType)) {
			return workflowContext;
		}
		
		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "GetWorkflowContext";
	}

	// BEGIN EXTRA CODE
	private static Boolean ObjectIsSpecialisationOf(String ObjectToCheckCompleteName, String SuperObjectCompleteName){
		
		IMetaObject meta = Core.getMetaObject(ObjectToCheckCompleteName);
		
		Boolean matchFound = false;
		IMetaObject superObjects[] = new IMetaObject[meta.getSuperObjects().size()];
		superObjects = meta.getSuperObjects().toArray(superObjects);
		for(IMetaObject superObject : superObjects){
			String superName = superObject.getName();
			if( SuperObjectCompleteName.equals(superName) ){
				matchFound = true;
				break;
			}
		}
		
		return matchFound;
	}
	// END EXTRA CODE
}
